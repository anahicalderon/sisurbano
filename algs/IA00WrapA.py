# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-12-09
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2019-10-12'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink)
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *

pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

class IA00WrapA(QgsProcessingAlgorithm):
    """
    Calcula todos los indicadores de ambiente construido
    """


    BLOCKS = 'BLOCKS'
    FIELD_POPULATION = 'FIELD_POPULATION'
    FIELD_HOUSING = 'FIELD_HOUSING'    
    CELL_SIZE = 'CELL_SIZE'
    STUDY_AREA_GRID = 'STUDY_AREA_GRID'

    CADASTRE = 'CADASTRE'
    CONSTRUCTION_AREA = 'CONSTRUCTION_AREA'
    FLOORS = 'FLOORS'

    BLOCKS_LAST = 'BLOCKS_LAST'
    BLOCKS_BEGIN = 'BLOCKS_BEGIN'
    BUILT_BEGIN = 'BUILT_BEGIN'
    BUILT_LAST = 'BUILT_LAST'
    FIELD_POPULATION_LAST = 'FIELD_POPULATION_LAST'
    FIELD_POPULATION_BEGIN = 'FIELD_POPULATION_BEGIN'
    YEARS = 'YEARS'

    EMPTY_PROPERTIES = 'EMPTY_PROPERTIES'

    EDUCATION = 'EDUCATION'
    HEALTH = 'HEALTH'
    APPROVAL = 'APPROVAL'
    SPORTS = 'SPORTS'    
    ADMIN_PUBLIC = 'ADMIN_PUBLIC'

    EQUIPMENT_PUBLIC_SPACE = 'EQUIPMENT_PUBLIC_SPACE'

    SHOP = 'SHOP'    
    GAS = 'GAS'    
    PHARMACY = 'PHARMACY'    
    BAKERY = 'BAKERY'    
    STATIONERY = 'STATIONERY'    

    TERTIARYUSES = 'TERTIARYUSES'

    TERTIARYUSES_ACTIVITIES = 'TERTIARYUSES_ACTIVITIES'   
    FIELD_ACTIVITIES = 'FIELD_ACTIVITIES' 

    OUTPUT_A01 = 'OUTPUT_A01'
    OUTPUT_A02 = 'OUTPUT_A02'
    OUTPUT_A03 = 'OUTPUT_A03'
    OUTPUT_A04 = 'OUTPUT_A04'
    OUTPUT_A05 = 'OUTPUT_A05'
    OUTPUT_A07 = 'OUTPUT_A07'
    OUTPUT_A08 = 'OUTPUT_A08'
    OUTPUT_A09 = 'OUTPUT_A09'
    OUTPUT_A10 = 'OUTPUT_A10'
    OUTPUT_A11 = 'OUTPUT_A11'


    def initAlgorithm(self, config):

        currentPath = getCurrentPath(self)
        FULL_PATH_A01 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA01'][1]))
        FULL_PATH_A02 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA02'][1]))
        FULL_PATH_A03 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA03'][1]))
        FULL_PATH_A04 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA04'][1]))
        FULL_PATH_A05 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA05'][1]))
        FULL_PATH_A07 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA07'][1]))
        FULL_PATH_A08 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA08'][1]))
        FULL_PATH_A09 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA09'][1]))
        FULL_PATH_A10 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA10'][1]))
        FULL_PATH_A11 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA11'][1]))

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS,
                self.tr('Manzanas'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_POPULATION,
                self.tr('Población'),
                'poblacion', 'BLOCKS'
            )
        )  

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_HOUSING,
                self.tr('Viviendas'),
                'viviendas', 'BLOCKS'
            )
        )   

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.CADASTRE,
                self.tr('Catastro'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.CONSTRUCTION_AREA,
                self.tr('Area de construcción'),
                'Area Cons', 'CADASTRE'
            )
        )      

        self.addParameter(
            QgsProcessingParameterField(
                self.FLOORS,
                self.tr('Pisos de construcción'),
                'Pisos cons', 'CADASTRE'
            )
        )   



        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS_LAST,
                self.tr('Manzanas en el último año'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_POPULATION_LAST,
                self.tr('Población en el último año'),
                'poblacion', 'BLOCKS_LAST'
            )
        )    

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS_BEGIN,
                self.tr('Manzanas en el año inicial'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_POPULATION_BEGIN,
                self.tr('Población en el último año'),
                'poblacion', 'BLOCKS_BEGIN'
            )
        )              


        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BUILT_LAST,
                self.tr('Área edificada en el último año'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BUILT_BEGIN,
                self.tr('Área edificada en el año inicial'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.YEARS,
                self.tr('Años entre el inicial y el final'),
                QgsProcessingParameterNumber.Integer,
                10, False, 1, 99999999
            )
        )                  


        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.EMPTY_PROPERTIES,
                self.tr('Predios vacíos'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.EDUCATION,
                self.tr('Educación'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.HEALTH,
                self.tr('Salud'),
                [QgsProcessing.TypeVectorPoint]
            )
        )  

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.APPROVAL,
                self.tr('Aprovisionamiento'),
                [QgsProcessing.TypeVectorPoint]
            )
        )    

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.SPORTS,
                self.tr('Deportivos recreativos'),
                [QgsProcessing.TypeVectorPoint]
            )
        )           


        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ADMIN_PUBLIC,
                self.tr('Gestión Pública'),
                [QgsProcessing.TypeVectorPoint]
            )
        ) 


        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.EQUIPMENT_PUBLIC_SPACE,
                self.tr('Espacios públicos abiertos'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )



        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.SHOP,
                self.tr('Tiendas de abarrotes, despensas, minimercado'),
                [QgsProcessing.TypeVectorPoint],
                '', True
            )
        )


        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.PHARMACY,
                self.tr('Farmacias y droguerías'),
                [QgsProcessing.TypeVectorPoint],
                '', True
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STATIONERY,
                self.tr('Papelerías y bazares'),
                [QgsProcessing.TypeVectorPoint],
                '', True
            )
        )     

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BAKERY,
                self.tr('Panaderías, heladería y pastelería'),
                [QgsProcessing.TypeVectorPoint],
                '', True
            )
        )
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.GAS,
                self.tr('Depósitos de distribución de cilindros de gas'),
                [QgsProcessing.TypeVectorPoint],
                '', True
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.TERTIARYUSES,
                self.tr('Uos terciarios (comercio, servicios u oficinas)'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.TERTIARYUSES_ACTIVITIES,
                self.tr('Equipamientos de actividades'),
                [QgsProcessing.TypeVectorPoint]
            )
        )    

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_ACTIVITIES,
                self.tr('Actividades'),
                'categoria', 'TERTIARYUSES_ACTIVITIES'
            )
        )  


        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STUDY_AREA_GRID,
                self.tr(TEXT_GRID_INPUT),
                [QgsProcessing.TypeVectorPolygon],
                '', OPTIONAL_GRID_INPUT
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_A01,
                self.tr('A01 Densidad neta de habitantes'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_A01)
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_A02,
                self.tr('A02 Densidad neta de viviendas'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_A02)
            )
        )  

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_A03,
                self.tr('A03 Compacidad absoluta'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_A03)
            )
        ) 

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_A04,
                self.tr('A04 Eficiencia en el uso del territorio'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_A04)
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_A05,
                self.tr('A05 Área de predios vacíos'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_A05)
            )
        )         


        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_A07,
                self.tr('A07 Proximidad a servicios urbanos básicos'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_A07)
            )
        )         


        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_A08,
                self.tr('A08 Proximidad al espacio público abierto'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_A08)
            )
        )  

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_A09,
                self.tr('A09 Cobertura de actividades comerciales cotinianas'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_A09)
            )
        )         

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_A10,
                self.tr('A10 Relación entre actividad y residencia'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_A10)
            )
        )     

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_A11,
                self.tr('A11 Complejidad urbana'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_A11)
            )
        )               


    def processAlgorithm(self, params, context, feedback):
        steps = 0
        totalStpes = 12
        outputs = {}
        results = {}
        feedback = QgsProcessingMultiStepFeedback(totalStpes, feedback)

        # A01 Densidad neta de habitantes
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_POPULATION': params['FIELD_POPULATION'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_A01']
        }
        outputs['A01DensidadNetaDeHabitantes'] = processing.run('SISURBANO:A01 Densidad neta de habitantes', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_A01'] = outputs['A01DensidadNetaDeHabitantes']['OUTPUT']        
 
        # A02 Densidad neta de viviendas
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_HOUSING': params['FIELD_HOUSING'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_A02']
        }
        outputs['A02DensidadNetaDeViviendas'] = processing.run('SISURBANO:A02 Densidad neta de viviendas', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_A02'] = outputs['A02DensidadNetaDeViviendas']['OUTPUT']

        # A03 Compacidad absoluta
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}
        alg_params = {
            'CADASTRE': params['CADASTRE'],
            'CONSTRUCTION_AREA': params['CONSTRUCTION_AREA'],
            'FLOORS': params['FLOORS'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_A03']
        }
        outputs['A03CompacidadAbsoluta'] = processing.run('SISURBANO:A03 Compacidad absoluta', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_A03'] = outputs['A03CompacidadAbsoluta']['OUTPUT']

        # A04 Eficiencia en el uso del territorio
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}
        alg_params = {
            'BLOCKS_LAST': params['BLOCKS_LAST'],
            'BLOCKS_BEGIN': params['BLOCKS_BEGIN'],
            'BUILT_BEGIN': params['BUILT_BEGIN'],
            'BUILT_LAST': params['BUILT_LAST'],
            'FIELD_POPULATION_LAST': params['FIELD_POPULATION_LAST'],
            'FIELD_POPULATION_BEGIN': params['FIELD_POPULATION_BEGIN'],
            'YEARS': params['YEARS'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_A04']
        }
        outputs['A04EficienciaEnElUsoDelTerritorio'] = processing.run('SISURBANO:A04 Eficiencia en el uso del territorio', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_A04'] = outputs['A04EficienciaEnElUsoDelTerritorio']['OUTPUT']    

        # A05 Área de predios vacíos
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'EMPTY_PROPERTIES': params['EMPTY_PROPERTIES'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_A05']
        }
        outputs['A05ReaDePrediosVacos'] = processing.run('SISURBANO:A05 Área de predios vacíos', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_A05'] = outputs['A05ReaDePrediosVacos']['OUTPUT']


        # A07 Proximidad a servicios urbanos básicos
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}        
        alg_params = {
            'ADMIN_PUBLIC': params['ADMIN_PUBLIC'],
            'APPROVAL': params['APPROVAL'],
            'BLOCKS': params['BLOCKS'],
            'EDUCATION': params['EDUCATION'],
            'FIELD_HOUSING': params['FIELD_HOUSING'],
            'HEALTH': params['HEALTH'],
            'SPORTS': params['SPORTS'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_A07']
        }
        outputs['A07ProximidadAServiciosUrbanosBsicos'] = processing.run('SISURBANO:A07 Proximidad a servicios urbanos básicos', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_A07'] = outputs['A07ProximidadAServiciosUrbanosBsicos']['OUTPUT']  


        # A08 Proximidad al espacio público abierto
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}            
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'EQUIPMENT_PUBLIC_SPACE': params['EQUIPMENT_PUBLIC_SPACE'],
            'FIELD_HOUSING': params['FIELD_HOUSING'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_A08']
        }
        outputs['A08ProximidadAlEspacioPblicoAbierto'] = processing.run('SISURBANO:A08 Proximidad al espacio público abierto', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_A08'] = outputs['A08ProximidadAlEspacioPblicoAbierto']['OUTPUT']      


        # A09 Cobertura de actividades comerciales cotinianas
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}            
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_POPULATE_HOUSING': params['FIELD_HOUSING'],        
            'BAKERY': params['BAKERY'],
            'GAS': params['GAS'],
            'PHARMACY': params['PHARMACY'],
            'SHOP': params['SHOP'],
            'STATIONERY': params['STATIONERY'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_A09']
        }
        outputs['A09CoberturaDeActividadesComercialesCotinianas'] = processing.run('SISURBANO:A09 Cobertura de actividades comerciales cotinianas', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_A09'] = outputs['A09CoberturaDeActividadesComercialesCotinianas']['OUTPUT']   

        # A10 Relación entre actividad y residencia
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}             
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_HOUSING': params['FIELD_HOUSING'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'TERTIARYUSES': params['TERTIARYUSES'],
            'OUTPUT': params['OUTPUT_A10']
        }
        outputs['A10RelacinEntreActividadYResidencia'] = processing.run('SISURBANO:A10 Relación entre actividad y residencia', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_A10'] = outputs['A10RelacinEntreActividadYResidencia']['OUTPUT']

        # A11 Complejidad urbana
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}            
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_ACTIVITIES': params['FIELD_ACTIVITIES'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'TERTIARYUSES_ACTIVITIES': params['TERTIARYUSES_ACTIVITIES'],
            'OUTPUT': params['OUTPUT_A11']
        }
        outputs['A11ComplejidadUrbana'] = processing.run('SISURBANO:A11 Complejidad urbana', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_A11'] = outputs['A11ComplejidadUrbana']['OUTPUT']

                             

        return results


    def icon(self):
        return QIcon(os.path.join(pluginPath, 'sisurbano', 'icons', 'make-hexa_logo.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'A00 Todos los indicadores A'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'A Ambiente construido'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return IA00WrapA()

    def shortHelpString(self):
        return  "<b>Descripción:</b><br>"\
                "<span>Calcula todos los indicadores de Ambiente construido</span><br>"\