# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-16
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2019-09-16'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink)
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *
import numpy as np
import pandas as pd
import tempfile
import subprocess

pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

class ID17SpatialSegregation(QgsProcessingAlgorithm):
    """
    Mide el cuartil uno de la población en términos de menores recursos,
    respecto al total de la población para el área de estudio. Se utiliza
    el Índice de Segregación Espacial Areal (ISEA). 

    Los cuartiles de la población se obtienen a partir de los índices de vida,
    escogiendo el uno que representa el sector poblacional con mayor carencia.
    Se calcula el ISEA para cada área de estudio. Los sectores de donde la proporción
    de un grupo poblacional es mayor a la población total se indican por valores
    mayores a 1; evidenciando un proceso de segregación. No así si los
    valores son cercanos a 1.    
    Formula: (Porcentaje de la población del Cuartil uno en el Secto i / Porcentaje de la población del Cuartil en toda la ciudad)*100
    """

    BLOCKS = 'BLOCKS'
    FIELD_POPULATION = 'FIELD_POPULATION'
    CENSO_VIVIENDA = 'CENSO_VIVIENDA'
    CENSO_POBLACION = 'CENSO_POBLACION'
    CENSO_HOGAR = 'CENSO_HOGAR'
    # NUMBER_HABITANTS = 'NUMBER_HABITANTS'
    THEFTS = 'THEFTS'
    CELL_SIZE = 'CELL_SIZE'
    OUTPUT = 'OUTPUT'
    STUDY_AREA_GRID = 'STUDY_AREA_GRID'

    def initAlgorithm(self, config):

        currentPath = getCurrentPath(self)
        FULL_PATH = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['ID11'][1]))

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS,
                self.tr('Manzanas'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_POPULATION,
                self.tr('Población'),
                'poblacion', 'BLOCKS'
            )
        )   

        self.addParameter(
            QgsProcessingParameterFile(
                self.CENSO_POBLACION,
                self.tr('Censo población'),
                extension='csv'
            )
        ) 

        self.addParameter(
            QgsProcessingParameterFile(
                self.CENSO_HOGAR,
                self.tr('Censo hogar'),
                extension='csv'
            )
        )           

        self.addParameter(
            QgsProcessingParameterFile(
                self.CENSO_VIVIENDA,
                self.tr('Censo vivienda'),
                extension='csv'
            )
        )           

             

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.THEFTS,
                self.tr('Robos'),
                [QgsProcessing.TypeVectorPoint]
            )
        )


        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STUDY_AREA_GRID,
                self.tr(TEXT_GRID_INPUT),
                [QgsProcessing.TypeVectorPolygon],
                '', OPTIONAL_GRID_INPUT
            )
        )


        if OPTIONAL_GRID_INPUT:
            self.addParameter(
                QgsProcessingParameterNumber(
                    self.CELL_SIZE,
                    self.tr('Tamaño de la malla'),
                    QgsProcessingParameterNumber.Integer,
                    P_CELL_SIZE, False, 1, 99999999
                )
            )          


        # self.addParameter(
        #     QgsProcessingParameterNumber(
        #         self.NUMBER_HABITANTS,
        #         self.tr('Por cada número de habitantes'),
        #         QgsProcessingParameterNumber.Integer,
        #         100000, False, 1, 99999999
        #     )
        # )   

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Salida'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH)
            )
        )

    def processAlgorithm(self, params, context, feedback):
        steps = 0
        totalStpes = 12
        fieldPopulation = params['FIELD_POPULATION']
        # fieldHab = params['NUMBER_HABITANTS']

        feedback = QgsProcessingMultiStepFeedback(totalStpes, feedback)


        # blocks = calculateArea(params['BLOCKS'], 'area_bloc', context,
        #                        feedback)

        # steps = steps+1
        # feedback.setCurrentStep(steps)
        # if not OPTIONAL_GRID_INPUT: params['CELL_SIZE'] = P_CELL_SIZE
        # grid, isStudyArea = buildStudyArea(params['CELL_SIZE'], params['BLOCKS'],
        #                                  params['STUDY_AREA_GRID'],
        #                                  context, feedback)
        # gridNeto = grid  


        dfPoblacion = pd.read_csv(params['CENSO_POBLACION'])
        withPopulation(dfPoblacion)

        #cambiar RECODE V01 (1=2) (4=2) (2 thru 3=1) (5 thru 6=0) INTO TECHO.
        

        
        return True


    def withPopulation(self, df):   
        lakes = df.apply(binaryClassifier, source_col='p20', output_col='small_big', threshold=1, axis=1)


    def binaryClassifier(self, row, source_col, output_col, threshold, value):
        # If area of input geometry is lower that the threshold value
        if row[source_col] == threshold:
            # Update the output column with value 0
            row[output_col] = value
        # If area of input geometry is higher than the threshold value update with value 1
        else:
            row[output_col]
        # Return the updated row
        return row             


    def icon(self):
        return QIcon(os.path.join(pluginPath, 'sisurbano', 'icons', 'thief.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'D17 Segregación espacial'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'D Dinámicas socio-espaciales'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ID17SpatialSegregation()

    def shortHelpString(self):
        return  "<b>Descripción:</b><br/>"\
                "<span>Mide la cantidad de robos al año por número de habitantes</span>"\
                "<br/><br/><b>Justificación y metodología:</b><br/>"\
                "<span>Las tazas de robo podrían ser entendidas mejor por medio de encuestas de victimización, más que en base a datos policiales dado que no siempre se denuncian estos delitos.</span>"\
                "<br/><br/><b>Formula:</b><br/>"\
                "<span>(Robos / número de personas)*100<br/>"         

