# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-12-09
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2019-10-13'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink)
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *

pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

class ID00WrapD(QgsProcessingAlgorithm):
    """
    Calcula todos los indicadores de ambiente construido
    """


    BLOCKS = 'BLOCKS'
    FIELD_POPULATION = 'FIELD_POPULATION'
    FIELD_HOUSING = 'FIELD_HOUSING'    
    CELL_SIZE = 'CELL_SIZE'
    STUDY_AREA_GRID = 'STUDY_AREA_GRID'

    #-----------------D01----------------------  
    VAR_SECTORES = 'VAR_SECTORES'
    FIELD_VAR_SECTORES = 'FIELD_VAR_SECTORES'
    #-----------------D02----------------------    
    HOUSING_DEFICIENCIES = 'HOUSING_DEFICIENCIES'
    #-----------------D03----------------------    
    RISK = 'RISK'
    #-----------------D04----------------------
    OPEN_SPACE = 'OPEN_SPACE'
    SPACE2IMPROVEMENT = 'SPACE2IMPROVEMENT'
    #-----------------D10----------------------    
    EQUIPMENT_MARKET = 'EQUIPMENT_MARKET'
    #-----------------D09----------------------    
    THEFTS = 'THEFTS'
    #-----------------OUTPUTS----------------------
    OUTPUT_D01 = 'OUTPUT_D01'
    OUTPUT_D02 = 'OUTPUT_D02'
    OUTPUT_D03 = 'OUTPUT_D03'
    OUTPUT_D04 = 'OUTPUT_D04'
    OUTPUT_D08 = 'OUTPUT_D08'
    OUTPUT_D09 = 'OUTPUT_D09'


    def initAlgorithm(self, config):

        currentPath = getCurrentPath(self)
        FULL_PATH_D01 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['ID01'][1]))
        FULL_PATH_D02 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['ID02'][1]))
        FULL_PATH_D03 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['ID03'][1]))
        FULL_PATH_D04 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['ID04'][1]))
        FULL_PATH_D10 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['ID08'][1]))
        FULL_PATH_D09 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['ID09'][1]))

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS,
                self.tr('Manzanas'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_POPULATION,
                self.tr('Población'),
                'poblacion', 'BLOCKS'
            )
        )  

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_HOUSING,
                self.tr('Viviendas'),
                'viviendas', 'BLOCKS'
            )
        )   


        #-----------------D01----------------------  
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.VAR_SECTORES,
                self.tr('Sectores'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_VAR_SECTORES,
                self.tr('Viviendas con servicios básicos'),
                'Viviendas_', 'VAR_SECTORES'
            )
        )   
        #-----------------D02----------------------    
        self.addParameter(
            QgsProcessingParameterField(
                self.HOUSING_DEFICIENCIES,
                self.tr('Viviendas con deficiencias'),
                'viviendas', 'BLOCKS'
            )
        )        
        #-----------------D03----------------------    
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.RISK,
                self.tr('Zonas de riesgo'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )
        #-----------------D04----------------------
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.OPEN_SPACE,
                self.tr('Espacios públicos abiertos'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.SPACE2IMPROVEMENT,
                self.tr('Espacios públicos abiertos que necesitan mejoras'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )
        #-----------------D10----------------------    
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.EQUIPMENT_MARKET,
                self.tr('Mercados públicos'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        #-----------------D09----------------------       
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.THEFTS,
                self.tr('Robos'),
                [QgsProcessing.TypeVectorPoint]
            )
        )
        #-----------------OTHERS----------------------     

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STUDY_AREA_GRID,
                self.tr(TEXT_GRID_INPUT),
                [QgsProcessing.TypeVectorPolygon],
                '', OPTIONAL_GRID_INPUT
            )
        )

        #-----------------OUTPUT----------------------          

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_D01,
                self.tr('D01 Viviendas con cobertura total de servicios básicos'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_D01)
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_D02,
                self.tr('D02 Viviendas con carencias constructivas'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_D02)
            )
        )        
             
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_D03,
                self.tr('D03 Viviendas emplazadas en zonas vulnerables y de riesgo'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_D03)
            )
        )        
           
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_D04,
                self.tr('D04 Espacios públicos abiertos que necesitan mejoras'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_D04)
            )
        )             

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_D08,
                self.tr('D10 Cercanía y asequibilidad a alimentos'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_D10)
            )
        )             

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_D09,
                self.tr('D09 Número de robos anuales'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_D09)
            )
        )             


    def processAlgorithm(self, params, context, feedback):
        steps = 0
        totalStpes = 7
        outputs = {}
        results = {}
        feedback = QgsProcessingMultiStepFeedback(totalStpes, feedback)

        # D01 Viviendas con cobertura total de servicios básicos
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_POPULATION': params['FIELD_POPULATION'],
            'FIELD_VAR_SECTORES': params['FIELD_VAR_SECTORES'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'VAR_SECTORES': params['VAR_SECTORES'],
            'OUTPUT': params['OUTPUT_D01']
        }
        outputs['D01ViviendasConCoberturaTotalDeServiciosBsicos'] = processing.run('SISURBANO:D01 Viviendas con cobertura total de servicios básicos', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_D01'] = outputs['D01ViviendasConCoberturaTotalDeServiciosBsicos']['OUTPUT']               
                          

        # D02 Viviendas con carencias constructivas
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}        
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_HOUSING': params['FIELD_HOUSING'],
            'HOUSING_DEFICIENCIES': params['HOUSING_DEFICIENCIES'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_D02']
        }
        outputs['D02ViviendasConCarenciasConstructivas'] = processing.run('SISURBANO:D02 Viviendas con carencias constructivas', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_D02'] = outputs['D02ViviendasConCarenciasConstructivas']['OUTPUT']


        # D03 Viviendas emplazadas en zonas vulnerables y de riesgo
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}          
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_HOUSING': params['FIELD_HOUSING'],
            'RISK': params['RISK'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_D03']
        }
        outputs['D03ViviendasEmplazadasEnZonasVulnerablesYDeRiesgo'] = processing.run('SISURBANO:D03 Viviendas emplazadas en zonas vulnerables y de riesgo', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_D03'] = outputs['D03ViviendasEmplazadasEnZonasVulnerablesYDeRiesgo']['OUTPUT']

        # D04 Espacios públicos abiertos que necesitan mejoras
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}           
        alg_params = {
            'OPEN_SPACE': params['OPEN_SPACE'],
            'SPACE2IMPROVEMENT': params['SPACE2IMPROVEMENT'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_D04']
        }
        outputs['D04EspaciosPblicosAbiertosQueNecesitanMejoras'] = processing.run('SISURBANO:D04 Espacios públicos abiertos que necesitan mejoras', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_D04'] = outputs['D04EspaciosPblicosAbiertosQueNecesitanMejoras']['OUTPUT']   


        # D08 Cercanía y asequibilidad a alimentos
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}          
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'EQUIPMENT_MARKET': params['EQUIPMENT_MARKET'],
            'FIELD_HOUSING': params['FIELD_HOUSING'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_D08']
        }
        outputs['D10CercanaYAsequibilidadAAlimentos'] = processing.run('SISURBANO:D10 Cercanía y asequibilidad a alimentos', alg_params, context=context, feedback=feedback, is_child_algorithm=True)    
        results['OUTPUT_D08'] = outputs['D10CercanaYAsequibilidadAAlimentos']['OUTPUT']     

        # D09 Número de robos anuales
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}           
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_POPULATION': params['FIELD_POPULATION'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'THEFTS': params['THEFTS'],
            'OUTPUT': params['OUTPUT_D09']
        }
        outputs['D09RobosPorNmeroDeHabitantes'] = processing.run('SISURBANO:D09 Número de robos anuales', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_D09'] = outputs['D09RobosPorNmeroDeHabitantes']['OUTPUT']                       


        return results


    def icon(self):
        return QIcon(os.path.join(pluginPath, 'sisurbano', 'icons', 'make-hexa_logo.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'D00 Todos los indicadores D'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'D Dinámicas socio-espaciales'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ID00WrapD()

    def shortHelpString(self):
        return  "<b>Descripción:</b><br>"\
                "<span>Calcula todos los indicadores de Dinámicas socio-espaciales</span>"\
                