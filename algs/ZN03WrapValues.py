# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-16
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2019-09-16'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterEnum,
                       QgsProject,
                       QgsProcessingParameterFeatureSink)
from qgis.gui import QgisInterface
from qgis.utils import iface
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *

pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

def joinAll(validInputs, params, context, feedback):
  outp = QgsProcessing.TEMPORARY_OUTPUT
  totalValidInputs = len(validInputs)
  step = 0
  steps = totalValidInputs
  feedback = QgsProcessingMultiStepFeedback(steps, feedback)  
  i = 0
  for k,v in validInputs.items(): 
    i = i + 1
    # if i == totalValidInputs:
    #   outp = params['OUTPUT']
    feedback.pushConsoleInfo(str(i))
    val = validInputs[k]
    layer = str(val[0])
    attr = str(val[1])
    if i == 1:
      result = layer    
    else:   
      step = step+1
      feedback.setCurrentStep(step)
      result = joinAttrByLocation(result,
                              layer,
                              attr,
                              [IGUALA],
                              UNDISCARD_NONMATCHING,               
                              context,
                              feedback)      
      result = result['OUTPUT']

  return result

def buildExpression(validInputs):
  expression = ""
  i = 0
  totalValidInputs = len(validInputs)
  for k,v in validInputs.items():   
    i = i + 1
    val = validInputs[k]
    attr = str(val[1])
    expression = expression + " " + attr + " IS NOT NULL"
    if i != totalValidInputs:
      expression = expression + " AND"

  print(expression)
  return expression


def buildExpressionDiscard(validInputs):
  expression = ""
  i = 0
  totalValidInputs = len(validInputs)
  for k,v in validInputs.items():   
    i = i + 1
    val = validInputs[k]
    attr = str(val[1])
    expression = expression + " " + attr + " IS NULL"
    if i != totalValidInputs:
      expression = expression + " OR"

  print(expression)
  return expression  


class ZN03WrapValues(QgsProcessingAlgorithm):
    """
    Une todos los indicadores en un solo grid
    """  

    OUTPUT = 'OUTPUT'
    OUTPUT_DISCARD = 'OUTPUT_DISCARD'
    prefix = ''


    def initAlgorithm(self, config):

        # currentPath = getPath()
        # attrName = getPossibleAttrName("n_")

        # FULL_PATH = buildFullPathName(currentPath, 'n_'+attrName+'.shp')

        layer = iface.activeLayer()

        try:
          nameLayer = layer.name()
          isNormalIndex =  len(nameLayer.split("n_i")) == 2          
        except Exception as e:
          isNormalIndex =  False


        if isNormalIndex: 
          self.prefix = 'n_'
        else: 
          self.prefix = ''

        print(isNormalIndex)


        for key in NAMES_INDEX:     
          currentPath = getPath()
          FULL_PATH = buildShapeFullPathName(currentPath, nameWithOuputExtension(self.prefix+ NAMES_INDEX[key][1]))            
          if not isExistFile(FULL_PATH): 
            FULL_PATH = ''
          self.addParameter(
              QgsProcessingParameterFeatureSource(
                  NAMES_INDEX[key][0],
                  self.tr(NAMES_INDEX[key][2]),
                  [QgsProcessing.TypeVectorPolygon],
                  FULL_PATH, True
              )
          )

          self.addParameter(
              QgsProcessingParameterField(
                  'FIELD_'+NAMES_INDEX[key][1],
                  self.tr(NAMES_INDEX[key][1]),
                  NAMES_INDEX[key][1], NAMES_INDEX[key][0],
                  optional = True
              )
          )     


        currentPath = getPath()
        FULL_PATH = buildFullPathName(currentPath, 'sisurbano.gpkg')
        FULL_PATH_DISACARD = buildFullPathName(currentPath, 'sisurbano_discarded.gpkg')


        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Salida de celdas unidas'),
                QgsProcessing.TypeVectorAnyGeometry,
                FULL_PATH
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_DISCARD,
                self.tr('Salida de celdas descartadas'),
                QgsProcessing.TypeVectorAnyGeometry,
                FULL_PATH_DISACARD
            )
        )        

    def processAlgorithm(self, params, context, feedback):
      allInputs = dict()
      validInputs = dict()

      NAMES_INDEX_N = {}
      for k in NAMES_INDEX:
        v = NAMES_INDEX[k][0]
        newName = self.prefix + str(v)
        NAMES_INDEX_N.update({k : newName})
        feedback.pushConsoleInfo(str(newName))


      # feedback.pushConsoleInfo(str(params[NAMES_INDEX['IA01']]))
      # feedback.pushConsoleInfo(str(params[NAMES_INDEX['IA02']]))

      for key in NAMES_INDEX:        
        if params[NAMES_INDEX['IA01'][0]] != '':
          allInputs.update({key : [params[NAMES_INDEX[key][0]], params['FIELD_'+NAMES_INDEX[key][1]]]})


      print (allInputs)
      
      for k,v in allInputs.items():
        val = allInputs[k]
        if val[0] != None and val[1] != None:
          validInputs.update({k : val})


      print(validInputs)

      totalValidInputs = len(validInputs)
      totalStpes = totalValidInputs

      feedback.pushConsoleInfo(str("total " + str(totalValidInputs)))



      if totalValidInputs > 1:
        wrapAllValues = joinAll(validInputs, params, context, feedback)
        expression = buildExpression(validInputs)
        expressionDiscard = buildExpressionDiscard(validInputs)
        notNullWrapAllValues = filterByExpression(wrapAllValues, expression, context, feedback, params['OUTPUT'])
        nullWrapAllValues = filterByExpression(wrapAllValues, expressionDiscard, context, feedback, params['OUTPUT_DISCARD'])
      else:
        feedback.pushConsoleInfo(str("Se necesita al menos 2 entradas válidas"))


      # for layer in iface.layerTreeView().selectedLayers():
      #     feedback.pushConsoleInfo(str(layer.getName()))
      #     layer.setName('NewName')


          # print(layer.name()) 
          # print(layer.id()) 
          # print('------') 

      return {}

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        #return {self.OUTPUT: dest_id}
                                          
    def icon(self):
        return QIcon(os.path.join(pluginPath, 'sisurbano', 'icons', 'joinlayers.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Z03 Unir indicadores'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Z General'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ZN03WrapValues()
    def shortHelpString(self):
        return  "<b>Descripción:</b><br>"\
                "<span>Une el valor de las celdas de todos los indicadores. Requerido para usar la herramienta MESUE.</span>"\
                "<br/><br/><b>Justificación y metodología:</b><br/>"\
                "<span>Se une en un solo layer todos los valores de los indicadores para cada celda. Las celdas que contengan algún valor nulo en uno de sus indicadores serán descartados.</span>"\