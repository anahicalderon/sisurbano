# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-16
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2020-01-12'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink)
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *

pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

class IA06StreetProportion(QgsProcessingAlgorithm):
    """
    Mide el grado de apertura entre las edificaciones que enmarcan una calle
    para evaluar los niveles de insolación e iluminación en ella. Valoración
    entre la altura (h) de las edificaciones y la distancia (d) entre dichas edificaciones.

    Para el estudio se asume una altura de 3m por piso. La altura total de la edificación es (h) y, 
    la distancia entre edificaciones es (d). Con la longitud de los frentes de cada 
    edificación, se calcula el % del tramo que tiene una relación h/d ≤ 1, entendiendo como el 100% la longitud total de la manzana. 
    Formula: (Tramos de calle en m con una relación h/d menor o igual a 1 / Longitud total de la manzana en m)*100
    """ 
    CADASTRE = 'CADASTRE'
    FLOORS = 'FLOORS'
    STREETS = 'STREETS'
    CELL_SIZE = 'CELL_SIZE'
    OUTPUT = 'OUTPUT'
    # OUTPUT2 = 'OUTPUT2'
    STUDY_AREA_GRID = 'STUDY_AREA_GRID'
 

    def initAlgorithm(self, config):
        currentPath = getCurrentPath(self)
        FULL_PATH = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IA06'][1]))    

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.CADASTRE,
                self.tr('Edificaciones'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FLOORS,
                self.tr('Pisos de construcción'),
                'Pisos cons', 'CADASTRE'
            )
        )  

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STREETS,
                self.tr('Vías'),
                [QgsProcessing.TypeVectorLine]
            )
        )         

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STUDY_AREA_GRID,
                self.tr(TEXT_GRID_INPUT),
                [QgsProcessing.TypeVectorPolygon],
                '', OPTIONAL_GRID_INPUT
            )
        )

        if OPTIONAL_GRID_INPUT:
            self.addParameter(
                QgsProcessingParameterNumber(
                    self.CELL_SIZE,
                    self.tr('Tamaño de la malla'),
                    QgsProcessingParameterNumber.Integer,
                    P_CELL_SIZE, False, 1, 99999999
                )
            )   

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Salida'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH)                
            )
        )

        # self.addParameter(
        #     QgsProcessingParameterFeatureSink(
        #         self.OUTPUT2,
        #         self.tr('Salida2'),
        #         QgsProcessing.TypeVectorAnyGeometry,
        #         str(FULL_PATH)                
        #     )
        # )        

    def processAlgorithm(self, params, context, feedback):
        steps = 0
        totalStpes = 32
        # todos tienen un piso. El area de contruccion esta tomado por pisos
        fieldFloorsNumber = str('"'+params['FLOORS']+'"')
        heightFloor = '3'

        feedback = QgsProcessingMultiStepFeedback(totalStpes, feedback)

        steps = steps+1
        feedback.setCurrentStep(steps)
        if not OPTIONAL_GRID_INPUT: params['CELL_SIZE'] = P_CELL_SIZE        
        grid, isStudyArea = buildStudyArea(params['CELL_SIZE'], params['CADASTRE'],
                                           params['STUDY_AREA_GRID'],
                                           context, feedback)
        grid = grid['OUTPUT']

        results = {}
        outputs = {}

        # Calculadora de campos
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'idp',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 1,
            'FORMULA': '$id',
            'INPUT': params['CADASTRE'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CalculadoraDeCampos'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # Calculadora de campos azimut v
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'zv',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,
            'FORMULA': 'degrees(azimuth(start_point($geometry), end_point($geometry)))',
            'INPUT': params['STREETS'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CalculadoraDeCamposAzimutV'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)


        formulaHeight = 'coalesce(' + heightFloor + ' * ' + fieldFloorsNumber + ', 0)'
        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # Calculadora de campos altura constru
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'built_h',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,
            'FORMULA': formulaHeight,
            'INPUT': outputs['CalculadoraDeCampos']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CalculadoraDeCamposAlturaConstru'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}

        # Rehacer campos idp
        alg_params = {
            'FIELDS_MAPPING': [{'expression': 'idp', 'length': 10, 'name': 'idp', 'precision': 0, 'type': 0}, {'expression': 'built_h', 'length': 10, 'name': 'built_h', 'precision': 3, 'type': 0}],
            'INPUT': outputs['CalculadoraDeCamposAlturaConstru']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['RehacerCamposIdp'] = processing.run('qgis:refactorfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}

        # POligonos a lineas
        alg_params = {
            'INPUT': outputs['RehacerCamposIdp']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['PoligonosALineas'] = processing.run('native:polygonstolines', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(5)
        if feedback.isCanceled():
            return {}

        # Explotar lineas
        alg_params = {
            'INPUT': outputs['PoligonosALineas']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExplotarLineas'] = processing.run('native:explodelines', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(6)
        if feedback.isCanceled():
            return {}

        # v.clean

        # se quita vclean porque no funciona en scripts el grass
        # alg_params = {
        #     '-b': False,
        #     '-c': False,
        #     'GRASS_MIN_AREA_PARAMETER': 0.0001,
        #     'GRASS_OUTPUT_TYPE_PARAMETER': 0,
        #     'GRASS_REGION_PARAMETER': None,
        #     'GRASS_SNAP_TOLERANCE_PARAMETER': -1,
        #     'GRASS_VECTOR_DSCO': '',
        #     'GRASS_VECTOR_EXPORT_NOCAT': False,
        #     'GRASS_VECTOR_LCO': '',
        #     'input': outputs['ExplotarLineas']['OUTPUT'],
        #     'threshold': '',
        #     'tool': [6,11],
        #     'type': [1],
        #     'error': QgsProcessing.TEMPORARY_OUTPUT,
        #     'output': QgsProcessing.TEMPORARY_OUTPUT
        # }
        # outputs['Vclean'] = processing.run('grass7:v.clean', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # feedback.setCurrentStep(7)
        # if feedback.isCanceled():
        #     return {}

        # Unir atributos por localización loc
        # alg_params = {
        #     'DISCARD_NONMATCHING': False,
        #     'INPUT': outputs['Vclean']['output'],
        #     'JOIN': outputs['Vclean']['error'],
        #     'JOIN_FIELDS': 'fid',
        #     'METHOD': 0,
        #     'PREDICATE': [2],
        #     'PREFIX': '_',
        #     'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        # }
        # outputs['UnirAtributosPorLocalizacinLoc'] = processing.run('qgis:joinattributesbylocation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # feedback.setCurrentStep(8)
        # if feedback.isCanceled():
        #     return {}

        # Seleccionar por expresión
        # alg_params = {
        #     'EXPRESSION': '_fid is NULL',
        #     'INPUT': outputs['UnirAtributosPorLocalizacinLoc']['OUTPUT'],
        #     'METHOD': 0
        # }
        # outputs['SeleccionarPorExpresin'] = processing.run('qgis:selectbyexpression', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # feedback.setCurrentStep(9)
        # if feedback.isCanceled():
        #     return {}

        # Extraer los objetos espaciales seleccionados
        # alg_params = {
        #     'INPUT': outputs['SeleccionarPorExpresin']['OUTPUT'],
        #     'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        # }
        # outputs['ExtraerLosObjetosEspacialesSeleccionados'] = processing.run('native:saveselectedfeatures', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # feedback.setCurrentStep(10)
        # if feedback.isCanceled():
        #     return {}

        # Calculadora de campos idx
        # alg_params = {
        #     'FIELD_LENGTH': 10,
        #     'FIELD_NAME': 'idx',
        #     'FIELD_PRECISION': 3,
        #     'FIELD_TYPE': 1,
        #     'FORMULA': '$id',
        #     'INPUT': outputs['ExtraerLosObjetosEspacialesSeleccionados']['OUTPUT'],
        #     'NEW_FIELD': True,
        #     'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        # }
        # outputs['CalculadoraDeCamposIdx'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # feedback.setCurrentStep(11)
        # if feedback.isCanceled():
        #     return {}


        # Calculadora de campos idx
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'idx',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 1,
            'FORMULA': '$id',
            'INPUT': outputs['ExplotarLineas']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CalculadoraDeCamposIdx'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(7)
        if feedback.isCanceled():
            return {}


        # Line substring 1
        alg_params = {
            'END_DISTANCE': 1,
            'INPUT': outputs['CalculadoraDeCamposIdx']['OUTPUT'],
            'START_DISTANCE': 0.1,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['LineSubstring1'] = processing.run('native:linesubstring', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(12)
        if feedback.isCanceled():
            return {}

        # Calculadora de campos azimut p
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'zp',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,
            'FORMULA': 'degrees(azimuth(start_point($geometry), end_point($geometry)))',
            'INPUT': outputs['LineSubstring1']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CalculadoraDeCamposAzimutP'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(13)
        if feedback.isCanceled():
            return {}

        # Buffer
        alg_params = {
            'DISSOLVE': False,
            'DISTANCE': 0.001,
            'END_CAP_STYLE': 0,
            'INPUT': outputs['CalculadoraDeCamposIdx']['OUTPUT'],
            'JOIN_STYLE': 0,
            'MITER_LIMIT': 2,
            'SEGMENTS': 5,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            # 'OUTPUT': params['OUTPUT']
        }
        outputs['Buffer'] = processing.run('native:buffer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(14)
        if feedback.isCanceled():
            return {}

        # Unir atributos por proximidad azimuts
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'FIELDS_TO_COPY': 'zv',
            'INPUT': outputs['CalculadoraDeCamposAzimutP']['OUTPUT'],
            'INPUT_2': outputs['CalculadoraDeCamposAzimutV']['OUTPUT'],
            'MAX_DISTANCE': 50,
            'NEIGHBORS': 1,
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['UnirAtributosPorProximidadAzimuts'] = processing.run('native:joinbynearest', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(15)
        if feedback.isCanceled():
            return {}

        # Extraer por expresión perpendicular
        alg_params = {
            'EXPRESSION': ' (zv >  (zp  - 6) AND    zv <  (zp  + 6) ) OR  (zv - 186 <  zp   AND    zv - 174 >  zp ) OR  (zv + 186 >  zp   AND    zv + 174 <  zp) \n',
            'INPUT': outputs['UnirAtributosPorProximidadAzimuts']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExtraerPorExpresinPerpendicular'] = processing.run('native:extractbyexpression', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(16)
        if feedback.isCanceled():
            return {}

        # Transecto
        alg_params = {
            'ANGLE': 90,
            'INPUT': outputs['ExtraerPorExpresinPerpendicular']['OUTPUT'],
            'LENGTH': 100,
            'SIDE': 0,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Transecto'] = processing.run('native:transect', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(17)
        if feedback.isCanceled():
            return {}

        # Diferencia
        alg_params = {
            'INPUT': outputs['Transecto']['OUTPUT'],
            'OVERLAY': outputs['RehacerCamposIdp']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Diferencia'] = processing.run('native:difference', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(18)
        if feedback.isCanceled():
            return {}

        # Explotar lineas dife
        alg_params = {
            'INPUT': outputs['Diferencia']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            # 'OUTPUT': params['OUTPUT2']
        }
        outputs['ExplotarLineasDife'] = processing.run('native:explodelines', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(19)
        if feedback.isCanceled():
            return {}

        # Unir(resumen)
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'INPUT': outputs['ExplotarLineasDife']['OUTPUT'],
            'JOIN': outputs['Buffer']['OUTPUT'],
            'JOIN_FIELDS': 'idp',
            'PREDICATE': [6],
            'SUMMARIES': [0],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Unirresumen'] = processing.run('qgis:joinbylocationsummary', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(20)
        if feedback.isCanceled():
            return {}

        # Seleccionar for extractr
        alg_params = {
            'EXPRESSION': 'idp_count = 2',
            'INPUT': outputs['Unirresumen']['OUTPUT'],
            'METHOD': 0
        }
        outputs['SeleccionarForExtractr'] = processing.run('qgis:selectbyexpression', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(21)
        if feedback.isCanceled():
            return {}

        # lineas finales
        alg_params = {
            'INPUT': outputs['SeleccionarForExtractr']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['LineasFinales'] = processing.run('native:saveselectedfeatures', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(22)
        if feedback.isCanceled():
            return {}

        # lineas que cruzan calles
        alg_params = {
            'INPUT': outputs['LineasFinales']['OUTPUT'],
            'INTERSECT': params['STREETS'],
            'PREDICATE': [0],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['LineasQueCruzanCalles'] = processing.run('native:extractbylocation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(23)
        if feedback.isCanceled():
            return {}

        # longitud cruaar calle
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'len',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,
            'FORMULA': 'length($geometry)',
            'INPUT': outputs['LineasQueCruzanCalles']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['LongitudCruaarCalle'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(24)
        if feedback.isCanceled():
            return {}

        # Extraer por expresión minimos
        alg_params = {
            'EXPRESSION': ' minimum(len, group_by:=idx) = len',
            'INPUT': outputs['LongitudCruaarCalle']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExtraerPorExpresinMinimos'] = processing.run('native:extractbyexpression', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(25)
        if feedback.isCanceled():
            return {}

        # Unir atributos por proximidad h y d
        alg_params = {
            'DISCARD_NONMATCHING': True,
            'FIELDS_TO_COPY': '[\'idp\',\'idx\',\'built_h\']',
            'INPUT': outputs['ExtraerPorExpresinMinimos']['OUTPUT'],
            'INPUT_2': outputs['ExtraerPorExpresinPerpendicular']['OUTPUT'],
            'MAX_DISTANCE': 0.0001,
            'NEIGHBORS': 1,
            'PREFIX': '_',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['UnirAtributosPorProximidadHYD'] = processing.run('native:joinbynearest', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(26)
        if feedback.isCanceled():
            return {}

        # Calculadora de campos h/d
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': 'hd',
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,
            'FORMULA': 'built_h / len',
            'INPUT': outputs['UnirAtributosPorProximidadHYD']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CalculadoraDeCamposHd'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(27)
        if feedback.isCanceled():
            return {}

        # Centroides h/d
        alg_params = {
            'ALL_PARTS': False,
            'INPUT': outputs['CalculadoraDeCamposHd']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CentroidesHd'] = processing.run('native:centroids', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(28)
        if feedback.isCanceled():
            return {}

        # Extraer por expresión hd positivo
        alg_params = {
            'EXPRESSION': 'hd < 1',
            'INPUT': outputs['CentroidesHd']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExtraerPorExpresinHdPositivo'] = processing.run('native:extractbyexpression', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(29)
        if feedback.isCanceled():
            return {}

        # Unir atributos por localización (resumen) grid hd positivos
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'INPUT': grid,
            'JOIN': outputs['ExtraerPorExpresinHdPositivo']['OUTPUT'],
            'JOIN_FIELDS': 'idp',
            'PREDICATE': [1],
            'SUMMARIES': [0],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['UnirAtributosPorLocalizacinResumenGridHdPositivos'] = processing.run('qgis:joinbylocationsummary', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(30)
        if feedback.isCanceled():
            return {}

        # Unir atributos por localización (resumen) positivos y negativos
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'INPUT': outputs['UnirAtributosPorLocalizacinResumenGridHdPositivos']['OUTPUT'],
            'JOIN': outputs['CentroidesHd']['OUTPUT'],
            'JOIN_FIELDS': 'idp',
            'PREDICATE': [1],
            'SUMMARIES': [0],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['UnirAtributosPorLocalizacinResumenPositivosYNegativos'] = processing.run('qgis:joinbylocationsummary', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(31)
        if feedback.isCanceled():
            return {}

        # Calculadora de campos
        alg_params = {
            'FIELD_LENGTH': 10,
            'FIELD_NAME': NAMES_INDEX['IA06'][0],
            'FIELD_PRECISION': 3,
            'FIELD_TYPE': 0,
            'FORMULA': 'coalesce(idp_count / idp_count_2 * 100, \"\")',
            'INPUT': outputs['UnirAtributosPorLocalizacinResumenPositivosYNegativos']['OUTPUT'],
            'NEW_FIELD': True,
            'OUTPUT': params['OUTPUT']
        }
        outputs['CalculadoraDeCampos'] = processing.run('qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['R_grid_final'] = outputs['CalculadoraDeCampos']['OUTPUT']
        
        return results

        #return {self.OUTPUT: dest_id}

    def icon(self):
        return QIcon(os.path.join(pluginPath, 'sisurbano', 'icons', 'road2.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'A06 Proporción de la calle'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'A Ambiente construido'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return IA06StreetProportion()

    def shortHelpString(self):
        return  "<b>Descripción:</b><br/>"\
                "<span>Mide el grado de apertura entre las edificaciones que enmarcan una calle para evaluar los niveles de insolación e iluminación en ella. Valoración entre la altura (h) de las edificaciones y la distancia (d) entre dichas edificaciones.</span>"\
                "<br/><br/><b>Justificación y metodología:</b><br/>"\
                "<span>Para el estudio se asume una altura de 3m por piso. La altura total de la edificación es (h) y, la distancia entre edificaciones es (d). Con la longitud de los frentes de cada edificación, se calcula el % del tramo que tiene una relación h/d ≤ 1, entendiendo como el 100% la longitud total de la manzana.</span>"\
                "<br/><br/><b>Formula:</b><br/>"\
                "<span>(Tramos de calle en m con una relación h/d menor o igual a 1 / Longitud total de la manzana en m)*100</span><br/>"
