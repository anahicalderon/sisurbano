# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-16
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2020-01-23'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink)
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *
import numpy as np
import pandas as pd
import tempfile
import subprocess

pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

class ID11UnemploymentRate(QgsProcessingAlgorithm):
    """
    Mide el porcentaje de la población económicamente activa (PEA) en condición de desempleo. 
    La PEA se define como aquellas personas de 15 y más años.
    Formula:(PEA desempleada / PEA total)*100
    """

    BLOCKS = 'BLOCKS'
    DPA_SECTOR = 'DPA_SECTOR'
    ENCUESTA = 'ENCUESTA'
    CELL_SIZE = 'CELL_SIZE'
    OUTPUT = 'OUTPUT'
    STUDY_AREA_GRID = 'STUDY_AREA_GRID'
    CURRENT_PATH = 'CURRENT_PATH'    

    def initAlgorithm(self, config):
        currentPath = getCurrentPath(self)
        self.CURRENT_PATH = currentPath        
        FULL_PATH = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['ID11'][1]))

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS,
                self.tr('Zonas Censales'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.DPA_SECTOR,
                self.tr('DPA Zona'),
                'dpa_zona', 'BLOCKS'
            )
        )           


        self.addParameter(
            QgsProcessingParameterFile(
                self.ENCUESTA,
                self.tr('Censo vivienda'),
                extension='csv',
                defaultValue='/Users/terra/llactalab/data/SHAPES_PARA_INDICADORES/ENEMDU_acumulada_BDDpersona2018.csv'
            )
        )           

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STUDY_AREA_GRID,
                self.tr(TEXT_GRID_INPUT),
                [QgsProcessing.TypeVectorPolygon],
                '', OPTIONAL_GRID_INPUT
            )
        )


        if OPTIONAL_GRID_INPUT:
            self.addParameter(
                QgsProcessingParameterNumber(
                    self.CELL_SIZE,
                    self.tr('Tamaño de la malla'),
                    QgsProcessingParameterNumber.Integer,
                    P_CELL_SIZE, False, 1, 99999999
                )
            )          


        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Salida'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH)
            )
        )
        

    def processAlgorithm(self, params, context, feedback):
        steps = 0
        totalStpes = 17
        fieldDpa = params['DPA_SECTOR']
        # fieldHab = params['NUMBER_HABITANTS']

        feedback = QgsProcessingMultiStepFeedback(totalStpes, feedback)

        if not OPTIONAL_GRID_INPUT: params['CELL_SIZE'] = P_CELL_SIZE
        grid, isStudyArea = buildStudyArea(params['CELL_SIZE'], params['BLOCKS'],
                                         params['STUDY_AREA_GRID'],
                                         context, feedback)
        gridNeto = grid  


        steps = steps+1
        feedback.setCurrentStep(steps)

        path = params['ENCUESTA']

        file = path

        #p03 edad
        cols = ['id_vivienda','id_hogar', 'p03', 'empleo', 'desempleo']
        df = pd.read_csv(file, usecols=cols, sep=";")


        df['id_vivienda'] = df['id_vivienda'].astype(str)

        df.loc[df['id_vivienda'].str.len() == 18, 'id_vivienda'] = "0" + df['id_vivienda']
        df['codsec'] = df['id_vivienda'].str[0:12]
        df['codzon'] = df['id_vivienda'].str[0:9]
        df['pbt'] = df['codsec'].astype(str)

        # CAMBIAR A TODA LA POBLACION MAYOR DE 15
        # df = df[(df['p03'] >= 15) & ((df['empleo'].astype(str) != ' ') | (df['desempleo'].astype(str) != ' '))]
        df = df[(df['p03'] >= 15)]

                
        df.loc[df['empleo'] == ' ', 'empleo'] = 0
        df.loc[df['desempleo'] == ' ', 'desempleo'] = 0


        df['desempleo'] = df['desempleo'].astype(float)

        aggOptions = {
                      'codzon' : 'first',
                      'pbt' : 'count',
                      'desempleo' : 'sum',
                     } 

        resManzanas = df.groupby('codzon').agg(aggOptions)

        resManzanas['des'] = None
        resManzanas['des'] = (resManzanas['desempleo'] / resManzanas['pbt'] * 100)
        df = resManzanas   
                  
        steps = steps+1
        feedback.setCurrentStep(steps)

        outputCsv = self.CURRENT_PATH+'/des.csv'
        feedback.pushConsoleInfo(str(('des en ' + outputCsv)))    
        df.to_csv(outputCsv, index=False)

        steps = steps+1
        feedback.setCurrentStep(steps)

        exitCsv = os.path.exists(outputCsv)
        if(exitCsv):
            print("El archivo CSV existe")
        else:
            print("No se encuentra CSV")

        CSV =  QgsVectorLayer(outputCsv, "csv", "ogr") 
        featuresCSV = CSV.getFeatures()
        # fields = layer.dataProvider().fields()
        field_names = [field.name() for field in CSV.fields()]       
        print(field_names)            


        steps = steps+1
        feedback.setCurrentStep(steps)
        result = joinByAttr2(params['BLOCKS'], fieldDpa,
                                outputCsv, 'codzon',
                                [],
                                UNDISCARD_NONMATCHING,
                                '',
                                1,
                                context,
                                feedback)

        # steps = steps+1
        # feedback.setCurrentStep(steps)
        # expressionNotNull = "des IS NOT '' AND des is NOT NULL"    
        # result =   filterByExpression(result['OUTPUT'], expressionNotNull, context, feedback) 



  # ----------------------CONVERTIR A NUMERICOS --------------------     
  
        steps = steps+1
        feedback.setCurrentStep(steps)
        formulaDummy = 'desempleo * 1.0'
        result = calculateField(result['OUTPUT'], 
                                 'desempleo_n',
                                 formulaDummy,
                                 context,
                                 feedback)  

        steps = steps+1
        feedback.setCurrentStep(steps)
        formulaDummy = 'pbt * 1.0'
        result = calculateField(result['OUTPUT'], 
                                 'pbt_n',
                                 formulaDummy,
                                 context,
                                 feedback)    

       # ----------------------PROPORCIONES AREA--------------------------
       
        steps = steps+1
        feedback.setCurrentStep(steps)        
        blocks = calculateArea(result['OUTPUT'], 'area_bloc', context,
                               feedback)     

        steps = steps+1
        feedback.setCurrentStep(steps)
        segments = intersection(blocks['OUTPUT'], gridNeto['OUTPUT'],
                                ['desempleo_n','pbt_n','area_bloc'],
                                ['id_grid','area_grid'],
                                context, feedback)        

        steps = steps+1
        feedback.setCurrentStep(steps)
        segmentsArea = calculateArea(segments['OUTPUT'],
                                     'area_seg',
                                     context, feedback)

        # -------------------------PROPORCIONES VALORES-------------------------

        steps = steps+1
        feedback.setCurrentStep(steps)
        formulaDummy = '(area_seg/area_bloc) * desempleo_n' 
        result = calculateField(segmentsArea['OUTPUT'], 'desempleo_n_seg',
                                               formulaDummy,
                                               context,
                                               feedback)     

        steps = steps+1
        feedback.setCurrentStep(steps)
        formulaDummy = '(area_seg/area_bloc) * pbt_n' 
        result = calculateField(result['OUTPUT'], 'pbt_n_seg',
                               formulaDummy,
                               context,
                               feedback)   


        steps = steps+1
        feedback.setCurrentStep(steps)
        result = makeSureInside(result['OUTPUT'],
                                context,
                                feedback)                                    

        #----------------------------------------------------------------------   

        steps = steps+1
        feedback.setCurrentStep(steps)
        result = joinByLocation(gridNeto['OUTPUT'],
                             result['OUTPUT'],
                             ['desempleo_n_seg','pbt_n_seg'],                                   
                              [CONTIENE], [SUM],
                              UNDISCARD_NONMATCHING,
                              context,
                              feedback)  


        steps = steps+1
        feedback.setCurrentStep(steps)
        formulaDummy = '(desempleo_n_seg_sum/pbt_n_seg_sum) * 100' 
        result = calculateField(result['OUTPUT'], NAMES_INDEX['ID11'][0],
                               formulaDummy,
                               context,
                               feedback, params['OUTPUT'])    


 
        # steps = steps+1
        # feedback.setCurrentStep(steps)
        # gridNeto = joinByLocation(gridNeto['OUTPUT'],
        #                      result['OUTPUT'],
        #                      ['desempleo_viv_n'],                                   
        #                       [INTERSECTA], [MEDIA],
        #                       UNDISCARD_NONMATCHING,
        #                       context,
        #                       feedback)         
 

        # fieldsMapping = [
        #     {'expression': '"id_grid"', 'length': 10, 'name': 'id_grid', 'precision': 0, 'type': 4}, 
        #     {'expression': '"area_grid"', 'length': 16, 'name': 'area_grid', 'precision': 3, 'type': 6}, 
        #     {'expression': '"tenencia_viv_n_mean"', 'length': 20, 'name': NAMES_INDEX['ID11'][0], 'precision': 2, 'type': 6}
        # ]      
        
        # steps = steps+1
        # feedback.setCurrentStep(steps)
        # result = refactorFields(fieldsMapping, gridNeto['OUTPUT'], 
        #                         context,
        #                         feedback, params['OUTPUT'])                                                                

        return result
          
    def icon(self):
        return QIcon(os.path.join(pluginPath, 'sisurbano', 'icons', 'unemployment.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'D11 Tasa de desempleo'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'D Dinámicas socio-espaciales'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ID11UnemploymentRate()

    def shortHelpString(self):
        return  "<b>Descripción:</b><br/>"\
                "<span>Mide el porcentaje de la población económicamente activa (PEA) en condición de desempleo. La PEA se define como aquellas personas de 15 y más años.</span>"\
                "<br/><br/><b>Justificación y metodología:</b><br/>"\
                "<span>Encuesta de Empleo, Desempleo y Subempleo, tabla acumulada de enero a diciembre de 2018: categoría DESEMPLEO.</span>"\
                "<br/><br/><b>Formula:</b><br/>"\
                "<span>(PEA desempleada / PEA total)*100</span><br/>"         

