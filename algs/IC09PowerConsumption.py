# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-16
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2020-01-27'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFeatureSink)
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *
import numpy as np
import pandas as pd
import tempfile
import subprocess

pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

class IC09PowerConsumption(QgsProcessingAlgorithm):
    """
    Mide el porcentaje de viviendas que tienen acceso directo en su vivienda a
    una fuente de agua potable, energía eléctrica, alcantarillado y recolección de residuos sólidos.
    Formula: (No. viviendas con todos los servicios / No. total de viviendas)*100
    """

    BLOCKS = 'BLOCKS'
    DPA_MAN = 'DPA_MAN'
    CENSO_VIVIENDA = 'CENSO_VIVIENDA'
    # CENSO_POBLACION = 'CENSO_POBLACION'
    CENSO_HOGAR = 'CENSO_HOGAR'
    CELL_SIZE = 'CELL_SIZE'
    OUTPUT = 'OUTPUT'
    STUDY_AREA_GRID = 'STUDY_AREA_GRID'
    CURRENT_PATH = 'CURRENT_PATH'    

    def initAlgorithm(self, config):
        currentPath = getCurrentPath(self)
        self.CURRENT_PATH = currentPath        
        FULL_PATH = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IC09'][1]))

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS,
                self.tr('Manzanas'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.DPA_MAN,
                self.tr('DPA Manzanas'),
                'dpa_manzan', 'BLOCKS'
            )
        )           

        # self.addParameter(
        #     QgsProcessingParameterFile(
        #         self.CENSO_POBLACION,
        #         self.tr('Censo población'),
        #         extension='csv',
        #         defaultValue="/Users/terra/llactalab/data/SHAPES_PARA_INDICADORES/Azuay_Pob_Manz.csv"
        #     )
        # ) 

        self.addParameter(
            QgsProcessingParameterFile(
                self.CENSO_HOGAR,
                self.tr('Censo hogar'),
                extension='csv',
                defaultValue="/Users/terra/llactalab/data/SHAPES_PARA_INDICADORES/Azuay_Hog_Manz.csv"
            )
        )           

        self.addParameter(
            QgsProcessingParameterFile(
                self.CENSO_VIVIENDA,
                self.tr('Censo vivienda'),
                extension='csv',
                defaultValue='/Users/terra/llactalab/data/SHAPES_PARA_INDICADORES/Azuay_Viv_Manz.csv'
            )
        )           

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STUDY_AREA_GRID,
                self.tr(TEXT_GRID_INPUT),
                [QgsProcessing.TypeVectorPolygon],
                '', OPTIONAL_GRID_INPUT
            )
        )


        if OPTIONAL_GRID_INPUT:
            self.addParameter(
                QgsProcessingParameterNumber(
                    self.CELL_SIZE,
                    self.tr('Tamaño de la malla'),
                    QgsProcessingParameterNumber.Integer,
                    P_CELL_SIZE, False, 1, 99999999
                )
            )          


        # self.addParameter(
        #     QgsProcessingParameterNumber(
        #         self.NUMBER_HABITANTS,
        #         self.tr('Por cada número de habitantes'),
        #         QgsProcessingParameterNumber.Integer,
        #         100000, False, 1, 99999999
        #     )
        # )   

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Salida'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH)
            )
        )
        

    def processAlgorithm(self, params, context, feedback):
        steps = 0
        totalStpes = 17
        fieldDpaMan = params['DPA_MAN']
        # fieldHab = params['NUMBER_HABITANTS']

        feedback = QgsProcessingMultiStepFeedback(totalStpes, feedback)

        if not OPTIONAL_GRID_INPUT: params['CELL_SIZE'] = P_CELL_SIZE
        grid, isStudyArea = buildStudyArea(params['CELL_SIZE'], params['BLOCKS'],
                                         params['STUDY_AREA_GRID'],
                                         context, feedback)
        gridNeto = grid  


        steps = steps+1
        feedback.setCurrentStep(steps)


        fileH = params['CENSO_HOGAR']
        cols = ['I01', 'I02', 'I03', 'I04', 'I05', 'I06', 'I09', 'I10', 'H12']
        df = pd.read_csv(fileH, usecols=cols)

        # fix codes 
        df['I01'] = df['I01'].astype(str)
        df['I02'] = df['I02'].astype(str)
        df['I03'] = df['I03'].astype(str)
        df['I04'] = df['I04'].astype(str)
        df['I05'] = df['I05'].astype(str)
        df['I06'] = df['I06'].astype(str)
        df['I09'] = df['I09'].astype(str)
        df['I10'] = df['I10'].astype(str)

        df.loc[df['I01'].str.len() < 2, 'I01'] = "0" + df['I01']
        df.loc[df['I02'].str.len() < 2, 'I02'] = "0" + df['I02']
        df.loc[df['I03'].str.len() < 2, 'I03'] = "0" + df['I03']
        df.loc[df['I04'].str.len() == 1, 'I04'] = "00" + df['I04']
        df.loc[df['I04'].str.len() == 2, 'I04'] = "0" + df['I04']
        df.loc[df['I05'].str.len() == 1, 'I05'] = "00" + df['I05']
        df.loc[df['I05'].str.len() == 2, 'I05'] = "0" + df['I05']
        df.loc[df['I06'].str.len() < 2, 'I06'] = "0" + df['I06']
        df.loc[df['I09'].str.len() == 1, 'I09'] = "00" + df['I09']
        df.loc[df['I09'].str.len() == 2, 'I09'] = "0" + df['I09']
        df.loc[df['I10'].str.len() < 2, 'I10'] = "0" + df['I10']

        df['codman'] = df['I01'].astype(str) + df['I02'].astype(str) + df['I03'].astype(str) \
                  + df['I04'].astype(str) + df['I05'].astype(str) + df['I06'].astype(str)


        df['codviv'] = df['I01'].astype(str) + df['I02'].astype(str) + df['I03'].astype(str) \
                  + df['I04'].astype(str) + df['I05'].astype(str) +  df['I06'].astype(str) \
                  + df['I09'].astype(str)


        df['codhog'] = df['I01'].astype(str) + df['I02'].astype(str) + df['I03'].astype(str) \
                  + df['I04'].astype(str) + df['I05'].astype(str)  + df['I09'].astype(str) \
                  + df['I10'].astype(str)

        df = df[(df['H12'] != '9999')]
        df.loc[df['H12'] == ' ', 'H12'] = None
        df['H12'] = df['H12'].astype(float)


        aggOptions = {
                      'codviv' : 'first',
                      'H12' : 'sum',
                     } 

        resVivi = df.groupby('codviv').agg(aggOptions)

        resVivi.index.name = None
        colsToSave = ['codviv', 'H12']
        resVivi = pd.DataFrame(resVivi, columns=colsToSave)

        dfH = resVivi

        file = params['CENSO_VIVIENDA']
        cols = ['I01', 'I02', 'I03', 'I04', 'I05', 'I06', 'I09', 'I10', 'TOTPER']
        df = pd.read_csv(file, usecols=cols)

        # fix codes 
        df['I01'] = df['I01'].astype(str)
        df['I02'] = df['I02'].astype(str)
        df['I03'] = df['I03'].astype(str)
        df['I04'] = df['I04'].astype(str)
        df['I05'] = df['I05'].astype(str)
        df['I06'] = df['I06'].astype(str)
        df['I09'] = df['I09'].astype(str)
        df['I10'] = df['I10'].astype(str)

        df.loc[df['I01'].str.len() < 2, 'I01'] = "0" + df['I01']
        df.loc[df['I02'].str.len() < 2, 'I02'] = "0" + df['I02']
        df.loc[df['I03'].str.len() < 2, 'I03'] = "0" + df['I03']
        df.loc[df['I04'].str.len() == 1, 'I04'] = "00" + df['I04']
        df.loc[df['I04'].str.len() == 2, 'I04'] = "0" + df['I04']
        df.loc[df['I05'].str.len() == 1, 'I05'] = "00" + df['I05']
        df.loc[df['I05'].str.len() == 2, 'I05'] = "0" + df['I05']
        df.loc[df['I06'].str.len() < 2, 'I06'] = "0" + df['I06']
        df.loc[df['I09'].str.len() == 1, 'I09'] = "00" + df['I09']
        df.loc[df['I09'].str.len() == 2, 'I09'] = "0" + df['I09']
        df.loc[df['I10'].str.len() < 2, 'I10'] = "0" + df['I10']

        df['codviv'] = df['I01'].astype(str) + df['I02'].astype(str) + df['I03'].astype(str) \
                  + df['I04'].astype(str) + df['I05'].astype(str) +  df['I06'].astype(str) \
                  + df['I09'].astype(str)


        aggOptions = {
                      'codviv' : 'first',
                      'TOTPER' : 'sum',
                     } 


        group = df.groupby('codviv').agg(aggOptions)
        group.reindex()
        colsToSave = ['codviv', 'TOTPER']
        group = pd.DataFrame(df, columns=colsToSave)


        merge = pd.merge(group, dfH,  how='left', on='codviv')
        df = merge

        # colsToSave = ['codhog', 'codviv', 'codman', 'TOTPER', 'H12']
        # df = pd.DataFrame(df, columns=colsToSave)

        df['enerporperson'] = df['H12'] / df['TOTPER']
        df['codman'] = df['codviv'].str[0:14]


        aggOptions = {
                      'codman' : 'first',
                      'enerporperson' : 'mean',
                     } 


        df = df.groupby('codman').agg(aggOptions)

        
        steps = steps+1
        feedback.setCurrentStep(steps)

        outputCsv = self.CURRENT_PATH+'/enerporperson.csv'
        feedback.pushConsoleInfo(str(('enerporperson en ' + outputCsv)))    
        df.to_csv(outputCsv, index=False)

        steps = steps+1
        feedback.setCurrentStep(steps)

        exitCsv = os.path.exists(outputCsv)
        if(exitCsv):
            print("El archivo CSV existe")
        else:
            print("No se encuentra CSV")

        CSV =  QgsVectorLayer(outputCsv, "csv", "ogr") 
        featuresCSV = CSV.getFeatures()
        # fields = layer.dataProvider().fields()
        field_names = [field.name() for field in CSV.fields()]       
        print(field_names)            

        steps = steps+1
        feedback.setCurrentStep(steps)

        steps = steps+1
        feedback.setCurrentStep(steps)
        result = joinByAttr2(params['BLOCKS'], fieldDpaMan,
                                outputCsv, 'codman',
                                [],
                                UNDISCARD_NONMATCHING,
                                '',
                                1,
                                context,
                                feedback)

        steps = steps+1
        feedback.setCurrentStep(steps)
        expressionNotNull = "enerporperson IS NOT '' AND enerporperson is NOT NULL"    
        notNull =   filterByExpression(result['OUTPUT'], expressionNotNull, context, feedback) 


        steps = steps+1
        feedback.setCurrentStep(steps)
        formulaDummy = 'enerporperson * 1.0'
        result = calculateField(notNull['OUTPUT'], 
                                 'enerporperson_n',
                                 formulaDummy,
                                 context,
                                 feedback)  


        steps = steps+1
        feedback.setCurrentStep(steps)
        gridNeto = joinByLocation(gridNeto['OUTPUT'],
                             result['OUTPUT'],
                             ['enerporperson_n'],                                   
                              [INTERSECTA], [MEDIA],
                              UNDISCARD_NONMATCHING,
                              context,
                              feedback)         
 

        fieldsMapping = [
            {'expression': '"id_grid"', 'length': 10, 'name': 'id_grid', 'precision': 0, 'type': 4}, 
            {'expression': '"area_grid"', 'length': 16, 'name': 'area_grid', 'precision': 3, 'type': 6}, 
            {'expression': '"enerporperson_n_mean"', 'length': 20, 'name': NAMES_INDEX['IC09'][0], 'precision': 2, 'type': 6}
        ]      
        
        
        steps = steps+1
        feedback.setCurrentStep(steps)
        result = refactorFields(fieldsMapping, gridNeto['OUTPUT'], 
                                context,
                                feedback, params['OUTPUT'])                                                                

        return result
          
    def icon(self):
        return QIcon(os.path.join(pluginPath, 'sisurbano', 'icons', 'power.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'C09 Consumo de energía eléctrica en la vivienda'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'C Movilidad urbana'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return IC09PowerConsumption()

    def shortHelpString(self):
        return  "<b>Descripción:</b><br/>"\
                "<span>El indicador mide el consumo residencial de energía eléctrica por persona en base al pago de la última planilla eléctrica.</span>"\
                "<br/><br/><b>Justificación y metodología:</b><br/>"\
                "<span></span>"\
                "<br/><br/><b>Formula:</b><br/>"\
                "<span>Valor del último pago mensual de energía eléctrica en $ / Número de personas en el hogar<br/>" 
