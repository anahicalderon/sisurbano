# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Sisurbano
                                 A QGIS plugin
 Cáculo de indicadores urbanos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-12-09
        copyright            : (C) 2019 by LlactaLAB
        email                : johnatan.astudillo@ucuenca.edu.ec
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Johnatan Astudillo'
__date__ = '2019-10-12'
__copyright__ = '(C) 2019 by LlactaLAB'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFeatureSink)
from .ZProcesses import *
from .Zettings import *
from .ZHelpers import *

pluginPath = os.path.split(os.path.split(os.path.dirname(__file__))[0])[0]

class IB00WrapB(QgsProcessingAlgorithm):
    """
    Calcula todos los indicadores de ambiente construido
    """


    BLOCKS = 'BLOCKS'
    FIELD_POPULATION = 'FIELD_POPULATION'
    FIELD_HOUSING = 'FIELD_HOUSING'    
    CELL_SIZE = 'CELL_SIZE'
    STUDY_AREA_GRID = 'STUDY_AREA_GRID'

    #-----------------B01----------------------
    NO2 = 'NO2'
    PS = 'PS'
    SO2 = 'SO2'
    O3 = 'O3' 
    #-----------------B02----------------------       
    ROADS = 'ROADS'
    LUMINARY = 'LUMINARY'
    #-----------------B03----------------------
    NOISE_NIGHT = 'NOISE_NIGHT'
    NOISE_DAY = 'NOISE_DAY'
    #-----------------B05----------------------
    GREEN = 'GREEN'
    #-----------------B06----------------------    
    EQUIPMENT_GREEN = 'EQUIPMENT_GREEN'
    #-----------------B07----------------------    
    SOIL = 'SOIL'
    #-----------------B08----------------------    
    AGRICULTRURAL = 'AGRICULTRURAL'
    #-----------------OUTPUTS----------------------
    OUTPUT_B01 = 'OUTPUT_B01'
    OUTPUT_B02 = 'OUTPUT_B02'
    OUTPUT_B03 = 'OUTPUT_B03'
    OUTPUT_B05 = 'OUTPUT_B05'
    OUTPUT_B06 = 'OUTPUT_B06'
    OUTPUT_B07 = 'OUTPUT_B07'
    OUTPUT_B08 = 'OUTPUT_B08'


    def initAlgorithm(self, config):

        currentPath = getCurrentPath(self)
        FULL_PATH_B01 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB01'][1]))
        FULL_PATH_B02 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB02'][1]))
        FULL_PATH_B03 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB03'][1]))
        FULL_PATH_B05 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB05'][1]))
        FULL_PATH_B06 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB06'][1]))
        FULL_PATH_B07 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB07'][1]))
        FULL_PATH_B08 = buildFullPathName(currentPath, nameWithOuputExtension(NAMES_INDEX['IB08'][1]))

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BLOCKS,
                self.tr('Manzanas'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_POPULATION,
                self.tr('Población'),
                'poblacion', 'BLOCKS'
            )
        )  

        self.addParameter(
            QgsProcessingParameterField(
                self.FIELD_HOUSING,
                self.tr('Viviendas'),
                'viviendas', 'BLOCKS'
            )
        )   


        #-----------------B01----------------------

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.O3,
                self.tr('O3 OZONO'),
                # defaultValue=None,
            )
        )          


        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.NO2,
                self.tr('NO2 DIOXIDO DE NITROGENO'),
                defaultValue=None
            )
        )
     

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.SO2,
                self.tr('SO2 DIOXIDO DE AZUFRE'),
                defaultValue=None
            )
        )   


        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.PS,
                self.tr('Ps PARTICULAS FINAS'),
                defaultValue=None
            )
        )  

        #-----------------B02----------------------       
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ROADS,
                self.tr('Vías públicas'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.LUMINARY,
                self.tr('Luminarias'),
                [QgsProcessing.TypeVectorPoint]
            )
        )      
        #-----------------B03----------------------
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.NOISE_DAY,
                self.tr('Ruido día'),
                defaultValue=None
            )
        )
     

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.NOISE_NIGHT,
                self.tr('Ruido noche'),
                # defaultValue=None,
            )
        )          

        #-----------------B05----------------------
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.GREEN,
                self.tr('Areas verdes'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        #-----------------B06----------------------    
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.EQUIPMENT_GREEN,
                self.tr('Espacio verde público'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )
        #-----------------B07----------------------    
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.SOIL,
                self.tr('Suelo permeable'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )
        #-----------------B08----------------------    
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.AGRICULTRURAL,
                self.tr('Areas verdes'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )
        #-----------------OTHERS----------------------
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.STUDY_AREA_GRID,
                self.tr(TEXT_GRID_INPUT),
                [QgsProcessing.TypeVectorPolygon],
                '', OPTIONAL_GRID_INPUT
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B01,
                self.tr('B01 Calidad del aire'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B01)
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B02,
                self.tr('B02 Luminación nocturna del viario público'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B02)
            )
        )   

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B03,
                self.tr('B03 Confort acústico'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B03)
            )
        )  

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B05,
                self.tr('B05 Superficie verde por habitante'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B05)
            )
        )      

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B06,
                self.tr('B06 Proximidad al espacio verde público más cercano'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B06)
            )
        )   

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B07,
                self.tr('B07 Permeabilidad del suelo'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B07)
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_B08,
                self.tr('B08 Superficie de área agrícola/huertos'),
                QgsProcessing.TypeVectorAnyGeometry,
                str(FULL_PATH_B08)
            )
        )                                    

             

    def processAlgorithm(self, params, context, feedback):
        steps = 0
        totalStpes = 8
        outputs = {}
        results = {}
        feedback = QgsProcessingMultiStepFeedback(totalStpes, feedback)

        # B01 Calidad del aire
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_POPULATION': params['FIELD_POPULATION'],
            'NO2': params['NO2'],
            'O3': params['O3'],
            'PS': params['PS'],
            'SO2': params['SO2'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_B01']
        }
        outputs['B01CalidadDelAire'] = processing.run('SISURBANO:B01 Calidad del aire', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_B01'] = outputs['B01CalidadDelAire']['OUTPUT']    


        # B02 Luminación nocturna del viario público
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}        
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_POPULATION': params['FIELD_POPULATION'],
            'LUMINARY': params['LUMINARY'],
            'ROADS': params['ROADS'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_B02']
        }
        outputs['B02LuminacinNocturnaDelViarioPblico'] = processing.run('SISURBANO:B02 Luminación nocturna del viario público', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_B02'] = outputs['B02LuminacinNocturnaDelViarioPblico']['OUTPUT']        


        # B03 Confort acústico
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}            
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_POPULATION': params['FIELD_POPULATION'],
            'NOISE_DAY': params['NOISE_DAY'],
            'NOISE_NIGHT': params['NOISE_NIGHT'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_B03']
        }
        outputs['B03ConfortAcstico'] = processing.run('SISURBANO:B03 Confort acústico', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_B03'] = outputs['B03ConfortAcstico']['OUTPUT']        
                    

        # B05 Superficie verde por habitante
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}          
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'FIELD_POPULATION': params['FIELD_POPULATION'],
            'GREEN': params['GREEN'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_B05']
        }
        outputs['B05SuperficieVerdePorHabitante'] = processing.run('SISURBANO:B05 Superficie verde por habitante', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_B05'] = outputs['B05SuperficieVerdePorHabitante']['OUTPUT']                          

        # B06 Proximidad al espacio verde público más cercano
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}            
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'EQUIPMENT_GREEN': params['EQUIPMENT_GREEN'],
            'FIELD_POPULATION': params['FIELD_POPULATION'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_B06']
        }
        outputs['B06ProximidadAlEspacioVerdePblicoMsCercano'] = processing.run('SISURBANO:B06 Proximidad al espacio verde público más cercano', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_B06'] = outputs['B06ProximidadAlEspacioVerdePblicoMsCercano']['OUTPUT']

        # B07 Permeabilidad del suelo
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}            
        alg_params = {
            'BLOCKS': params['BLOCKS'],
            'SOIL': params['SOIL'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_B07']
        }
        outputs['B07PermeabilidadDelSuelo'] = processing.run('SISURBANO:B07 Permeabilidad del suelo', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_B07'] = outputs['B07PermeabilidadDelSuelo']['OUTPUT']    

        # B08 Superficie de área agrícola/huertos
        steps = steps+1
        feedback.setCurrentStep(steps)  
        if feedback.isCanceled():
            return {}            
        alg_params = {
            'AGRICULTRURAL': params['AGRICULTRURAL'],
            'BLOCKS': params['BLOCKS'],
            'STUDY_AREA_GRID': params['STUDY_AREA_GRID'],
            'OUTPUT': params['OUTPUT_B08']
        }
        outputs['B08SuperficieDeReaAgrcolahuertos'] = processing.run('SISURBANO:B08 Superficie de área agrícola/huertos', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['OUTPUT_B08'] = outputs['B08SuperficieDeReaAgrcolahuertos']['OUTPUT']            

        return results


    def icon(self):
        return QIcon(os.path.join(pluginPath, 'sisurbano', 'icons', 'make-hexa_logo.png'))

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'B00 Todos los indicadores B'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'B Ambiente biofísico'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return IB00WrapB()

    def shortHelpString(self):
        return  "<b>Descripción:</b><br>"\
                "<span>Calcula todos los indicadores de Ambiente biofísico</span><br>"\